// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Code based on "Multiple Indicators Screener" by QuantNomad
// https://www.tradingview.com/script/yLwyZpOn-Multiple-Indicators-Screener/
// Â© gernouille

//@version=5
indicator('11th hour Screener', overlay=true)

////////////
// INPUTS //

i_size = input.string("normal", "Table size", options=["small", "normal", "large"])

/////////////
// SYMBOLS // 

u01 = input.bool(true,  title = "", group = 'Symbols', inline = 's01')
u02 = input.bool(false, title = "", group = 'Symbols', inline = 's02')
u03 = input.bool(false, title = "", group = 'Symbols', inline = 's03')
u04 = input.bool(false, title = "", group = 'Symbols', inline = 's04')
u05 = input.bool(false, title = "", group = 'Symbols', inline = 's05')
u06 = input.bool(false, title = "", group = 'Symbols', inline = 's06')
u07 = input.bool(false, title = "", group = 'Symbols', inline = 's07')
u08 = input.bool(false, title = "", group = 'Symbols', inline = 's08')
u09 = input.bool(false, title = "", group = 'Symbols', inline = 's09')
u10 = input.bool(false, title = "", group = 'Symbols', inline = 's10')
u11 = input.bool(false, title = "", group = 'Symbols', inline = 's11')
u12 = input.bool(false, title = "", group = 'Symbols', inline = 's12')
u13 = input.bool(false, title = "", group = 'Symbols', inline = 's13')
u14 = input.bool(false, title = "", group = 'Symbols', inline = 's14')
u15 = input.bool(false, title = "", group = 'Symbols', inline = 's15')
u16 = input.bool(false, title = "", group = 'Symbols', inline = 's16')
u17 = input.bool(false, title = "", group = 'Symbols', inline = 's17')
u18 = input.bool(false, title = "", group = 'Symbols', inline = 's18')
u19 = input.bool(false, title = "", group = 'Symbols', inline = 's19')
u20 = input.bool(false, title = "", group = 'Symbols', inline = 's20')
u21 = input.bool(false, title = "", group = 'Symbols', inline = 's21')
u22 = input.bool(false, title = "", group = 'Symbols', inline = 's22')
u23 = input.bool(false, title = "", group = 'Symbols', inline = 's23')
u24 = input.bool(false, title = "", group = 'Symbols', inline = 's24')
u25 = input.bool(false, title = "", group = 'Symbols', inline = 's25')
u26 = input.bool(false, title = "", group = 'Symbols', inline = 's26')
u27 = input.bool(false, title = "", group = 'Symbols', inline = 's27')
u28 = input.bool(false, title = "", group = 'Symbols', inline = 's28')
u29 = input.bool(false, title = "", group = 'Symbols', inline = 's29')
u30 = input.bool(false, title = "", group = 'Symbols', inline = 's30')
u31 = input.bool(false, title = "", group = 'Symbols', inline = 's31')
u32 = input.bool(false, title = "", group = 'Symbols', inline = 's32')
u33 = input.bool(false, title = "", group = 'Symbols', inline = 's33')
u34 = input.bool(false, title = "", group = 'Symbols', inline = 's34')
u35 = input.bool(false, title = "", group = 'Symbols', inline = 's35')
u36 = input.bool(false, title = "", group = 'Symbols', inline = 's36')
u37 = input.bool(false, title = "", group = 'Symbols', inline = 's37')
u38 = input.bool(false, title = "", group = 'Symbols', inline = 's38')
u39 = input.bool(false, title = "", group = 'Symbols', inline = 's39')
u40 = input.bool(false, title = "", group = 'Symbols', inline = 's40')

s01 = input.symbol('AAPL', group = 'Symbols', inline = 's01')
s02 = input.symbol('AAPL', group = 'Symbols', inline = 's02')
s03 = input.symbol('AAPL', group = 'Symbols', inline = 's03')
s04 = input.symbol('AAPL', group = 'Symbols', inline = 's04')
s05 = input.symbol('AAPL', group = 'Symbols', inline = 's05')
s06 = input.symbol('AAPL', group = 'Symbols', inline = 's06')
s07 = input.symbol('AAPL', group = 'Symbols', inline = 's07')
s08 = input.symbol('AAPL', group = 'Symbols', inline = 's08')
s09 = input.symbol('AAPL', group = 'Symbols', inline = 's09')
s10 = input.symbol('AAPL', group = 'Symbols', inline = 's10')
s11 = input.symbol('AAPL', group = 'Symbols', inline = 's11')
s12 = input.symbol('AAPL', group = 'Symbols', inline = 's12')
s13 = input.symbol('AAPL', group = 'Symbols', inline = 's13')
s14 = input.symbol('AAPL', group = 'Symbols', inline = 's14')
s15 = input.symbol('AAPL', group = 'Symbols', inline = 's15')
s16 = input.symbol('AAPL', group = 'Symbols', inline = 's16')
s17 = input.symbol('AAPL', group = 'Symbols', inline = 's17')
s18 = input.symbol('AAPL', group = 'Symbols', inline = 's18')
s19 = input.symbol('AAPL', group = 'Symbols', inline = 's19')
s20 = input.symbol('AAPL', group = 'Symbols', inline = 's20')
s21 = input.symbol('AAPL', group = 'Symbols', inline = 's21')
s22 = input.symbol('AAPL', group = 'Symbols', inline = 's22')
s23 = input.symbol('AAPL', group = 'Symbols', inline = 's23')
s24 = input.symbol('AAPL', group = 'Symbols', inline = 's24')
s25 = input.symbol('AAPL', group = 'Symbols', inline = 's25')
s26 = input.symbol('AAPL', group = 'Symbols', inline = 's26')
s27 = input.symbol('AAPL', group = 'Symbols', inline = 's27')
s28 = input.symbol('AAPL', group = 'Symbols', inline = 's28')
s29 = input.symbol('AAPL', group = 'Symbols', inline = 's29')
s30 = input.symbol('AAPL', group = 'Symbols', inline = 's30')
s31 = input.symbol('AAPL', group = 'Symbols', inline = 's31')
s32 = input.symbol('AAPL', group = 'Symbols', inline = 's32')
s33 = input.symbol('AAPL', group = 'Symbols', inline = 's33')
s34 = input.symbol('AAPL', group = 'Symbols', inline = 's34')
s35 = input.symbol('AAPL', group = 'Symbols', inline = 's35')
s36 = input.symbol('AAPL', group = 'Symbols', inline = 's36')
s37 = input.symbol('AAPL', group = 'Symbols', inline = 's37')
s38 = input.symbol('AAPL', group = 'Symbols', inline = 's38')
s39 = input.symbol('AAPL', group = 'Symbols', inline = 's39')
s40 = input.symbol('AAPL', group = 'Symbols', inline = 's40')

//////////////////
// CALCULATIONS //

// Get only symbol
only_symbol(s) => 
    array.get(str.split(s, ":"), 1)


simpleTime_func (barTime) =>
    ((hour(barTime)*100) + minute(barTime))
    
screener_func() => //morningTime, elventhHour, openBarIndex) =>
    
    morningHigherClose = 0.0
    morningLowerClose = 10000000.0
    highTime = 0
    lowTime = 0
    sup = 0
    supTime = 0

    i = 0
    barTime = simpleTime_func (time)
    while barTime>930
        if( barTime <= 1105)
            if(close[i]>morningHigherClose)
                morningHigherClose := close[i]
                highTime := time[i]
            if(close[i]<morningLowerClose)
                morningLowerClose := close[i]
                lowTime := time[i]
        i := i + 1
        barTime := simpleTime_func(time[i])

    highInt = simpleTime_func(highTime)
    lowInt = simpleTime_func(lowTime)
    
    if( (highInt>=1050 and highInt<=1105) or (lowInt>=1050 and lowInt<=1105))
        sup := (highInt>lowInt) ? 1 : -1
        supTime := (highInt>lowInt)? highInt : lowInt
            
    [math.round_to_mintick(close), sup, supTime]


[cl01, sup01, supTime01] = request.security(s01, timeframe.period, screener_func())
[cl02, sup02, supTime02] = request.security(s02, timeframe.period, screener_func())
[cl03, sup03, supTime03] = request.security(s03, timeframe.period, screener_func())
[cl04, sup04, supTime04] = request.security(s04, timeframe.period, screener_func())
[cl05, sup05, supTime05] = request.security(s05, timeframe.period, screener_func())
[cl06, sup06, supTime06] = request.security(s06, timeframe.period, screener_func())
[cl07, sup07, supTime07] = request.security(s07, timeframe.period, screener_func())
[cl08, sup08, supTime08] = request.security(s08, timeframe.period, screener_func())
[cl09, sup09, supTime09] = request.security(s09, timeframe.period, screener_func())
[cl10, sup10, supTime10] = request.security(s10, timeframe.period, screener_func())
[cl11, sup11, supTime11] = request.security(s11, timeframe.period, screener_func())
[cl12, sup12, supTime12] = request.security(s12, timeframe.period, screener_func())
[cl13, sup13, supTime13] = request.security(s13, timeframe.period, screener_func())
[cl14, sup14, supTime14] = request.security(s14, timeframe.period, screener_func())
[cl15, sup15, supTime15] = request.security(s15, timeframe.period, screener_func())
[cl16, sup16, supTime16] = request.security(s16, timeframe.period, screener_func())
[cl17, sup17, supTime17] = request.security(s17, timeframe.period, screener_func())
[cl18, sup18, supTime18] = request.security(s18, timeframe.period, screener_func())
[cl19, sup19, supTime19] = request.security(s19, timeframe.period, screener_func())
[cl20, sup20, supTime20] = request.security(s20, timeframe.period, screener_func())
[cl21, sup21, supTime21] = request.security(s21, timeframe.period, screener_func())
[cl22, sup22, supTime22] = request.security(s22, timeframe.period, screener_func())
[cl23, sup23, supTime23] = request.security(s23, timeframe.period, screener_func())
[cl24, sup24, supTime24] = request.security(s24, timeframe.period, screener_func())
[cl25, sup25, supTime25] = request.security(s25, timeframe.period, screener_func())
[cl26, sup26, supTime26] = request.security(s26, timeframe.period, screener_func())
[cl27, sup27, supTime27] = request.security(s27, timeframe.period, screener_func())
[cl28, sup28, supTime28] = request.security(s28, timeframe.period, screener_func())
[cl29, sup29, supTime29] = request.security(s29, timeframe.period, screener_func())
[cl30, sup30, supTime30] = request.security(s30, timeframe.period, screener_func())
[cl31, sup31, supTime31] = request.security(s31, timeframe.period, screener_func())
[cl32, sup32, supTime32] = request.security(s32, timeframe.period, screener_func())
[cl33, sup33, supTime33] = request.security(s33, timeframe.period, screener_func())
[cl34, sup34, supTime34] = request.security(s34, timeframe.period, screener_func())
[cl35, sup35, supTime35] = request.security(s35, timeframe.period, screener_func())
[cl36, sup36, supTime36] = request.security(s36, timeframe.period, screener_func())
[cl37, sup37, supTime37] = request.security(s37, timeframe.period, screener_func())
[cl38, sup38, supTime38] = request.security(s38, timeframe.period, screener_func())
[cl39, sup39, supTime39] = request.security(s39, timeframe.period, screener_func())
[cl40, sup40, supTime40] = request.security(s40, timeframe.period, screener_func())

////////////
// ARRAYS //

s_arr   = array.new_string(0)
u_arr   = array.new_bool(0)
cl_arr  = array.new_float(0)
sup_arr = array.new_float(0)
supTime_arr = array.new_int(0)

// Add Symbols 
array.push(s_arr, only_symbol(s01))
array.push(s_arr, only_symbol(s02))
array.push(s_arr, only_symbol(s03))
array.push(s_arr, only_symbol(s04))
array.push(s_arr, only_symbol(s05))
array.push(s_arr, only_symbol(s06))
array.push(s_arr, only_symbol(s07))
array.push(s_arr, only_symbol(s08))
array.push(s_arr, only_symbol(s09))
array.push(s_arr, only_symbol(s10))
array.push(s_arr, only_symbol(s11))
array.push(s_arr, only_symbol(s12))
array.push(s_arr, only_symbol(s13))
array.push(s_arr, only_symbol(s14))
array.push(s_arr, only_symbol(s15))
array.push(s_arr, only_symbol(s16))
array.push(s_arr, only_symbol(s17))
array.push(s_arr, only_symbol(s18))
array.push(s_arr, only_symbol(s19))
array.push(s_arr, only_symbol(s20))
array.push(s_arr, only_symbol(s21))
array.push(s_arr, only_symbol(s22))
array.push(s_arr, only_symbol(s23))
array.push(s_arr, only_symbol(s24))
array.push(s_arr, only_symbol(s25))
array.push(s_arr, only_symbol(s26))
array.push(s_arr, only_symbol(s27))
array.push(s_arr, only_symbol(s28))
array.push(s_arr, only_symbol(s29))
array.push(s_arr, only_symbol(s30))
array.push(s_arr, only_symbol(s31))
array.push(s_arr, only_symbol(s32))
array.push(s_arr, only_symbol(s33))
array.push(s_arr, only_symbol(s34))
array.push(s_arr, only_symbol(s35))
array.push(s_arr, only_symbol(s36))
array.push(s_arr, only_symbol(s37))
array.push(s_arr, only_symbol(s38))
array.push(s_arr, only_symbol(s39))
array.push(s_arr, only_symbol(s40))

///////////
// FLAGS //

array.push(u_arr, u01)
array.push(u_arr, u02)
array.push(u_arr, u03)
array.push(u_arr, u04)
array.push(u_arr, u05)
array.push(u_arr, u06)
array.push(u_arr, u07)
array.push(u_arr, u08)
array.push(u_arr, u09)
array.push(u_arr, u10)
array.push(u_arr, u11)
array.push(u_arr, u12)
array.push(u_arr, u13)
array.push(u_arr, u14)
array.push(u_arr, u15)
array.push(u_arr, u16)
array.push(u_arr, u17)
array.push(u_arr, u18)
array.push(u_arr, u19)
array.push(u_arr, u20)
array.push(u_arr, u21)
array.push(u_arr, u22)
array.push(u_arr, u23)
array.push(u_arr, u24)
array.push(u_arr, u25)
array.push(u_arr, u26)
array.push(u_arr, u27)
array.push(u_arr, u28)
array.push(u_arr, u29)
array.push(u_arr, u30)
array.push(u_arr, u31)
array.push(u_arr, u32)
array.push(u_arr, u33)
array.push(u_arr, u34)
array.push(u_arr, u35)
array.push(u_arr, u36)
array.push(u_arr, u37)
array.push(u_arr, u38)
array.push(u_arr, u39)
array.push(u_arr, u40)

///////////
// CLOSE //

array.push(cl_arr, cl01)
array.push(cl_arr, cl02)
array.push(cl_arr, cl03)
array.push(cl_arr, cl04)
array.push(cl_arr, cl05)
array.push(cl_arr, cl06)
array.push(cl_arr, cl07)
array.push(cl_arr, cl08)
array.push(cl_arr, cl09)
array.push(cl_arr, cl10)
array.push(cl_arr, cl11)
array.push(cl_arr, cl12)
array.push(cl_arr, cl13)
array.push(cl_arr, cl14)
array.push(cl_arr, cl15)
array.push(cl_arr, cl16)
array.push(cl_arr, cl17)
array.push(cl_arr, cl18)
array.push(cl_arr, cl19)
array.push(cl_arr, cl20)
array.push(cl_arr, cl21)
array.push(cl_arr, cl22)
array.push(cl_arr, cl23)
array.push(cl_arr, cl24)
array.push(cl_arr, cl25)
array.push(cl_arr, cl26)
array.push(cl_arr, cl27)
array.push(cl_arr, cl28)
array.push(cl_arr, cl29)
array.push(cl_arr, cl30)
array.push(cl_arr, cl31)
array.push(cl_arr, cl32)
array.push(cl_arr, cl33)
array.push(cl_arr, cl34)
array.push(cl_arr, cl35)
array.push(cl_arr, cl36)
array.push(cl_arr, cl37)
array.push(cl_arr, cl38)
array.push(cl_arr, cl39)
array.push(cl_arr, cl40)


////////////////
// SUPERTREND //

array.push(sup_arr, sup01)
array.push(sup_arr, sup02)
array.push(sup_arr, sup03)
array.push(sup_arr, sup04)
array.push(sup_arr, sup05)
array.push(sup_arr, sup06)
array.push(sup_arr, sup07)
array.push(sup_arr, sup08)
array.push(sup_arr, sup09)
array.push(sup_arr, sup10)
array.push(sup_arr, sup11)
array.push(sup_arr, sup12)
array.push(sup_arr, sup13)
array.push(sup_arr, sup14)
array.push(sup_arr, sup15)
array.push(sup_arr, sup16)
array.push(sup_arr, sup17)
array.push(sup_arr, sup18)
array.push(sup_arr, sup19)
array.push(sup_arr, sup20)
array.push(sup_arr, sup21)
array.push(sup_arr, sup22)
array.push(sup_arr, sup23)
array.push(sup_arr, sup24)
array.push(sup_arr, sup25)
array.push(sup_arr, sup26)
array.push(sup_arr, sup27)
array.push(sup_arr, sup28)
array.push(sup_arr, sup29)
array.push(sup_arr, sup30)
array.push(sup_arr, sup31)
array.push(sup_arr, sup32)
array.push(sup_arr, sup33)
array.push(sup_arr, sup34)
array.push(sup_arr, sup35)
array.push(sup_arr, sup36)
array.push(sup_arr, sup37)
array.push(sup_arr, sup38)
array.push(sup_arr, sup39)
array.push(sup_arr, sup40)

array.push(supTime_arr, supTime01)
array.push(supTime_arr, supTime02)
array.push(supTime_arr, supTime03)
array.push(supTime_arr, supTime04)
array.push(supTime_arr, supTime05)
array.push(supTime_arr, supTime06)
array.push(supTime_arr, supTime07)
array.push(supTime_arr, supTime08)
array.push(supTime_arr, supTime09)
array.push(supTime_arr, supTime10)
array.push(supTime_arr, supTime11)
array.push(supTime_arr, supTime12)
array.push(supTime_arr, supTime13)
array.push(supTime_arr, supTime14)
array.push(supTime_arr, supTime15)
array.push(supTime_arr, supTime16)
array.push(supTime_arr, supTime17)
array.push(supTime_arr, supTime18)
array.push(supTime_arr, supTime19)
array.push(supTime_arr, supTime20)
array.push(supTime_arr, supTime21)
array.push(supTime_arr, supTime22)
array.push(supTime_arr, supTime23)
array.push(supTime_arr, supTime24)
array.push(supTime_arr, supTime25)
array.push(supTime_arr, supTime26)
array.push(supTime_arr, supTime27)
array.push(supTime_arr, supTime28)
array.push(supTime_arr, supTime29)
array.push(supTime_arr, supTime30)
array.push(supTime_arr, supTime31)
array.push(supTime_arr, supTime32)
array.push(supTime_arr, supTime33)
array.push(supTime_arr, supTime34)
array.push(supTime_arr, supTime35)
array.push(supTime_arr, supTime36)
array.push(supTime_arr, supTime37)
array.push(supTime_arr, supTime38)
array.push(supTime_arr, supTime39)
array.push(supTime_arr, supTime40)

///////////
// PLOTS //

var tbl = table.new(position.top_right, 6, 41, frame_color=#151715, frame_width=1, border_width=2, border_color=color.new(color.white, 100))

textSize = switch i_size
    "small" => size.small
    "normal" => size.normal
    "large" => size.large

if barstate.islast

    table.cell(tbl, 0, 0, 'Symbol',     text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = textSize)
    table.cell(tbl, 1, 0, 'Cur. Price',      text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = textSize)
    table.cell(tbl, 2, 0, '11AM Trend', text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = textSize)
    table.cell(tbl, 3, 0, '11AM Time', text_halign = text.align_center, bgcolor = color.gray, text_color = color.white, text_size = textSize)

    for i = 0 to 39
        if array.get(u_arr, i)
        
            sup_text = array.get(sup_arr, i) == 0 ? "na" : (array.get(sup_arr, i) > 0 ? "Up" : "Down")
            sup_col  = array.get(sup_arr, i) == 0 ? color.gray : (array.get(sup_arr, i) > 0 ? color.green : color.red)
            
            table.cell(tbl, 0, i + 1, array.get(s_arr, i),                      text_halign = text.align_left,   bgcolor = color.gray, text_color = color.white, text_size = textSize)
            table.cell(tbl, 1, i + 1, str.tostring(array.get(cl_arr, i)),       text_halign = text.align_center, bgcolor = color.black,    text_color = color.white, text_size = textSize)
            table.cell(tbl, 2, i + 1, sup_text,                                 text_halign = text.align_center, bgcolor = sup_col,    text_color = color.white, text_size = textSize)
            table.cell(tbl, 3, i + 1, str.tostring(array.get(supTime_arr, i)),  text_halign = text.align_center, bgcolor = color.black,    text_color = color.white, text_size = textSize)
